/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventorysystem;

import CLASS.Customer;
import CLASS.IDGenerator;
import CLASS.Myfunc;
import CLASS.Product_detail;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aditya
 */
public class MANAGE_ORDERS_FORM extends javax.swing.JFrame {
    
    /**
     * Creates new form MANAGE_ORDERS_FORM
     */
    public MANAGE_ORDERS_FORM(){
        initComponents();
        try {
            Show_Customer_In_JTable();
        } catch (Exception ex) {
            Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Problem Loading Customer List : " + ex.getMessage());
            this.dispose();
            return;
        }
        jTextField_orderID.setText(IDGenerator.getIDforOrder());
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy / MM / dd");
	LocalDate localDate = LocalDate.now();
	jTextField_orderDate.setText(dtf.format(localDate));
        try {
            Show_Products_in_Category_in_JTable();
            //Calculate_and_Show_Total();
        } catch (Exception ex) {
            Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Problem Loading Products in The Selected Category : " + ex.getMessage());
            DefaultTableModel model = (DefaultTableModel)jTable_products.getModel();
            // clear jtable content
            model.setRowCount(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox_productCategory = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_orders = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel_totalRs = new javax.swing.JLabel();
        jLabel_total = new javax.swing.JLabel();
        jButton_payment = new javax.swing.JButton();
        jButton_showAllOrders = new javax.swing.JButton();
        jButton_removeOrder = new javax.swing.JButton();
        jButton_clear = new javax.swing.JButton();
        jTextField_customerID = new javax.swing.JTextField();
        jTextField_orderID = new javax.swing.JTextField();
        jTextField_orderDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton_refreshOrderID = new javax.swing.JButton();
        jCheckBox_generalCustomer = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_customers = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable_products = new javax.swing.JTable();
        jTextField_discountPercent = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField_discountPrice = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ORDERS");
        setIconImage((new ImageIcon("img.jpg")).getImage());

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        try
        {
            String[] catList = Myfunc.getAllProductCategoryNames();
            jComboBox_productCategory.setModel(new javax.swing.DefaultComboBoxModel<>(catList));
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null,"Problem in Loading Products in Categories : " + ex.getMessage());
            this.dispose();
        }
        jComboBox_productCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_productCategoryActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton1.setText(">>>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable_orders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "SubType", "Unit Size", "Unit Price(Rs.)", "Quantity", "Discount(Rs.)", "Discount(%)", "Amount(Rs.)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        addTableListener();
        jScrollPane3.setViewportView(jTable_orders);

        jLabel_totalRs.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_totalRs.setText(" TOTAL : Rs.");

        jLabel_total.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel_total.setText("0.0/-");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel_totalRs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_total, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel_totalRs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel_total, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
        );

        jButton_payment.setText("CONFIRM Order and PAY");
        jButton_payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_paymentActionPerformed(evt);
            }
        });

        jButton_showAllOrders.setText("Show All Orders");
        jButton_showAllOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_showAllOrdersActionPerformed(evt);
            }
        });

        jButton_removeOrder.setText("Remove Product");
        jButton_removeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_removeOrderActionPerformed(evt);
            }
        });

        jButton_clear.setText("Clear");
        jButton_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_clearActionPerformed(evt);
            }
        });

        jTextField_customerID.setEditable(false);

        jTextField_orderID.setEditable(false);

        jTextField_orderDate.setEditable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Customer ID :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Order ID :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Order Date :");

        jButton_refreshOrderID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_refreshOrderIDActionPerformed(evt);
            }
        });

        jCheckBox_generalCustomer.setBackground(new java.awt.Color(0, 51, 102));
        jCheckBox_generalCustomer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jCheckBox_generalCustomer.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox_generalCustomer.setText("GENERAL CUSTOMER");
        jCheckBox_generalCustomer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox_generalCustomerItemStateChanged(evt);
            }
        });

        jTable_customers.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable_customers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "First Name", "Last Name", "Telephone", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_customers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_customersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_customers);

        jTable_products.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "SubType", "Unit Size", "Unit Price (Rs.)", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable_products);

        jTextField_discountPercent.setText("0");
        jTextField_discountPercent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_discountPercentKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Overall Discount(Rs.) :");

        jTextField_discountPrice.setText("0");
        jTextField_discountPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_discountPriceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_discountPriceKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Discount(%) :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(122, 122, 122)
                                .addComponent(jComboBox_productCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(156, 156, 156))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_discountPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField_discountPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton_showAllOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jCheckBox_generalCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(60, 60, 60))
                                        .addComponent(jTextField_orderDate)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextField_customerID))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextField_orderID, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton_refreshOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton_removeOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_customerID, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField_orderID, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_refreshOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField_orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox_generalCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(219, 219, 219))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox_productCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton_showAllOrders)
                                    .addComponent(jButton_removeOrder)
                                    .addComponent(jButton_clear))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField_discountPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(jTextField_discountPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Calculate_and_Show_Total() {
        float total = 0;
        DefaultTableModel orderModel = (DefaultTableModel)jTable_orders.getModel();
        int rows = orderModel.getRowCount();
        int cols = orderModel.getColumnCount();
        for(int i = 0 ; i < rows ; i++)
        {
            String str = orderModel.getValueAt(i, cols - 1).toString();
            total += Float.parseFloat(str);
        }
        String dP = jTextField_discountPrice.getText();
        if(!dP.equals(""))
        {
            total -= Float.parseFloat(dP);
        }
        jLabel_total.setText(Float.toString(total) + "/-");
    }

    private void RemoveProductAtRow(int row) {
        DefaultTableModel orderModel = (DefaultTableModel)jTable_orders.getModel();
        DefaultTableModel model = (DefaultTableModel)jTable_products.getModel();
        String id = orderModel.getValueAt(row, 0).toString();
        float qtyToPurchase = Float.parseFloat(orderModel.getValueAt(row, 5).toString());
        int rowsProductTable = model.getRowCount();
        int rowsOrderTable = orderModel.getRowCount();
        if(rowsOrderTable == 1)  // && row == (rowsOrderTable-1)....only one row
        {
            jTextField_discountPrice.setText("0");
            jTextField_discountPercent.setText("0");
            jLabel_total.setText("0.0/-");
        }
        for(int i = 0 ; i < rowsProductTable ; i++)
        {
            String pdID = model.getValueAt(i, 0).toString();
            if(id.equals(pdID))
            {
                float qtyAvailable = Float.parseFloat(model.getValueAt(i, 5).toString());
                qtyAvailable += qtyToPurchase;
                model.setValueAt(qtyAvailable, i, 5);
                break;
                //return;
            }
        }
        orderModel.removeRow(row);
    }

    private boolean InsertOrder(){
        // TODO add your handling code here:
        if(checkInputs())
        {
            String numberOnly = jLabel_total.getText().replaceAll("[^0-9.]", "");
            Date date = Myfunc.getCurrentDate();
            DefaultTableModel model = (DefaultTableModel)jTable_orders.getModel();
            int rows = model.getRowCount();
            int cols = model.getColumnCount();
            Connection con = null , con1 = null;
            Connection conn[] = new Connection[rows];
            PreparedStatement ps = null;
            PreparedStatement ps2 = null;
            Savepoint savepoint1 = null;
            float orderBalance = Float.parseFloat(numberOnly);
            try {
                /*
                    In Insert Order you will never get the ID of the deleted customer
                    you will either get the ID of existing customer from list(table) or "GENERAL" as ID
                */
                Customer customer = Myfunc.getCustomerByID(jTextField_customerID.getText(), false);     // false - don't generate the customer
                if(customer.getBalance() < 0)
                {
                    if(orderBalance > customer.getBalance())
                    orderBalance -= customer.getBalance();
                    else
                        orderBalance = 0;
                }
            }catch(Exception ex)
            {
                
            }
            
            try {
                con = My_CNX.getConnection();
                con.setAutoCommit(false);
                //set a Savepoint
                savepoint1 = con.setSavepoint("Savepoint1");
                //System.out.println("database connected");
                try
                {
                    ps = con.prepareStatement("INSERT INTO order_table(id,CustomerID,OrderDate,OrderAmount,OverallDiscountPrice,OverallTax,Balance)"
                        + "values(?,?,?,?,?,?,?) ");
                    ps.setString(1, jTextField_orderID.getText());
                    ps.setString(2, jTextField_customerID.getText());
                    
                    //System.out.print("TOTAL (Decimal k baad)=> " + numberOnly);
                    ps.setFloat(4, Float.parseFloat(numberOnly));

                    ps.setFloat(6, 0);
                    ps.setFloat(5, Float.parseFloat(jTextField_discountPrice.getText()));
                    ps.setFloat(7, orderBalance);
                    ps.setDate(3 , date);
                    ps.executeUpdate();
                    
                    ps.close();
                }catch(SQLException ex)
                {
                    Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
                    throw new Exception("Insert into order_table FAILED!");
                }
                finally
                {
                    if(ps != null) ps.close();
                }
                
                try
                {
                    // Don't worry about the deleted customer
                    if(!jTextField_customerID.getText().contains("GENERAL"))
                    con1 = Myfunc.addOrderForCustomer(jTextField_customerID.getText(),Float.parseFloat(numberOnly),orderBalance,date,false);
                }catch(Exception e)
                {
                    throw e;
                }
                
                for(int i = 0 ; i < rows ; i++)
                {
                    try
                    {
                        Thread.sleep(1);
                        String id = IDGenerator.getIDforOrderDetail();
                        String orderID =  jTextField_orderID.getText();
                        String ProductDetailID = model.getValueAt(i, 0).toString();
                        float UnitPrice = Float.parseFloat(model.getValueAt(i, 4).toString());
                        float PurchasedQty = Float.parseFloat(model.getValueAt(i, 5).toString());
                        float ProductDiscountPrice = Float.parseFloat(model.getValueAt(i, 6).toString());

                        try
                        {
                            /* You will not get the "DELETED" productDetailID here 
                                bcoz the table is loaded from the database
                            */
                           conn[i] = Myfunc.UpdateQuantityInDatabase(ProductDetailID,PurchasedQty,false);
                        }catch(Exception e)
                        {
                            throw e;
                        }

                        ps2 = con.prepareStatement("INSERT INTO order_detail(id,OrderID,ProductDetailID,UnitPrice,PurchasedQty,ProductDiscountPrice,ProductTax)"
                            + "values(?,?,?,?,?,?,?)");
                        ps2.setString(1, id);
                        ps2.setString(2, orderID);
                        ps2.setString(3, ProductDetailID);
                        ps2.setFloat(4, UnitPrice);
                        ps2.setFloat(5, PurchasedQty );
                        ps2.setFloat(6, ProductDiscountPrice );
                        ps2.setFloat(7, 0);
                        ps2.executeUpdate();
                        ps2.close();
                    } catch(Exception ex)
                    {
                        throw ex;
                    }
                    finally
                    {
                        if(ps2 != null) ps2.close();
                    }
                }
                
                
                for(int i = 0 ; i < rows ; i++)
                {
                    conn[i].commit();
                    conn[i].close();
                }
                if(con1 != null)
                {
                    con1.commit();
                    con1.close();
                }
                con.commit();
                con.close();
                JOptionPane.showMessageDialog(null, "ORDER PLACED SUCCESSFULLY :-)");
                return true;
            } catch (Exception ex) {
                 JOptionPane.showMessageDialog(null,"ORDER NOT PLACED! : " + ex.getMessage());
                try {
                    if(con != null) {
                        con.rollback(savepoint1);
                    }
                } catch (SQLException ex1) {
                    Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }finally
            {
                for(int i = 0 ; i < rows ; i++)     try { if(conn[i] != null)  conn[i].close(); } catch(SQLException e){}
                try { if(ps != null)  ps.close(); } catch(SQLException e){}
                try { if(ps2 != null)  ps2.close(); } catch(SQLException e){}
                try { if(con1 != null)  con1.close(); } catch(SQLException e){}
                try { if(con != null)  con.close(); } catch(SQLException e){}
            }
        }else{
            JOptionPane.showMessageDialog(null, "One Or More Field Are Empty");
        }
         return false;
    }

    // Check Input Fields
    public boolean checkInputs()
    {
        DefaultTableModel model = (DefaultTableModel)jTable_orders.getModel();
        int rows = model.getRowCount();
        int cols = model.getColumnCount();
        if(
              jTextField_customerID.getText().equals("")
                || jTextField_orderID.getText().equals("")
                || jTextField_orderDate.getText().equals("")
                || rows == 0
          ){
            return false;
        }
        else{
            try{
                //Float.parseFloat(txt_price.getText());
                // TODO check phone number and email
                /*
                for(int i = 0; i < rows ; i++)
                {
                    for(int j = 0; j < cols ; j++)  not for all columns
                        if(model.getValueAt(i, j).toString().equals(""))
                        {
                            JOptionPane.showMessageDialog(null, "Field is Empty at row : " + (i+1) + " , col : " + (j+1));
                            return false;
                        }
                        else
                        {
                            try
                            {
                                Float.parseFloat(model.getValueAt(i, j).toString());
                            }catch(NumberFormatException ex)
                            {
                                JOptionPane.showMessageDialog(null, "Please Enter valid numbers at row : " + (i+1) + " , col : " + (j+1) + " => "+ ex.getMessage());
                                return false;
                            }
                        }
                }*/
                return true;
            }catch(Exception ex)
            {
                return false;
            }
        }
    }


    private static class OrderCustomizedProduct {
        public String productDetailID;
        public String Name;
        public String SubType;
        public float UnitSize;
        public float UnitPrice;
        public float Quantity;
        public String UnitCategory;

        private OrderCustomizedProduct(String id, String name, String subtype, String unitcategoryID, float unitsize, float unitprice, float quantity) throws Exception {
            this.productDetailID = id;
            this.Name = name;
            this.SubType = subtype;
            this.UnitCategory = Myfunc.getUnitCategoryName(unitcategoryID);
            this.UnitSize = unitsize;
            this.UnitPrice = unitprice;
            this.Quantity = quantity;
        }
    }
    
    private ArrayList<OrderCustomizedProduct> getOrderCustomizedProductsInCategory_by_CategoryID(String catID) throws SQLException {
        ArrayList<OrderCustomizedProduct> productList  = null;
        Connection con = null;
        String query = "SELECT product_table.Name , product_table.SubType , product_table.UnitCategoryID"
                + ", product_detail.id , product_detail.UnitSize , product_detail.UnitPrice "
                + ", product_detail.Quantity FROM product_table INNER JOIN product_detail"
                + " ON product_table.id = product_detail.ProductID "
                + "WHERE product_table.CategoryID = \'" + catID + "\'";

        Statement st = null;
        ResultSet rs = null;
            
        try {
            productList  = new ArrayList<>();
            con = My_CNX.getConnection();
            st = con.createStatement();
            rs = st.executeQuery(query);
            OrderCustomizedProduct product;
            
            while(rs.next())
            {
                product = new OrderCustomizedProduct(rs.getString("product_detail.id"),rs.getString("product_table.Name"),rs.getString("product_table.SubType"),rs.getString("product_table.UnitCategoryID"),rs.getFloat("product_detail.UnitSize"),rs.getFloat("product_detail.UnitPrice"),rs.getFloat("product_detail.Quantity"));
                productList.add(product);
            }
            rs.close();
            st.close();
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Myfunc.class.getName()).log(Level.SEVERE, null, ex);
            if(rs != null)  rs.close();
            if(st != null)  st.close();
            if(con != null)  con.close();
            throw ex;
        } catch(Exception ex)
        {
            productList = null;
        }
        finally
        {
            try { if(rs != null)  rs.close(); } catch(SQLException e){}
            try { if(st != null)  st.close(); } catch(SQLException e){}
            try { if(con != null)  con.close(); } catch(SQLException e){}
        }
        return productList; 
    }
    
    
    private void Show_Products_in_Category_in_JTable() throws Exception {
        // TODO :   SEE THE ORDER TABLE ALSO AND CHANGE HERE
        String catName = (String)jComboBox_productCategory.getSelectedItem();
        String catID = Myfunc.getProductCategoryID(catName);
        ArrayList<OrderCustomizedProduct> list = getOrderCustomizedProductsInCategory_by_CategoryID(catID);
        DefaultTableModel model = (DefaultTableModel)jTable_products.getModel();
        DefaultTableModel orderModel = (DefaultTableModel)jTable_orders.getModel();
        // clear jtable content
        model.setRowCount(0);
        int noOfColumns = 6;        // number of columns in user table
        Object[] row = new Object[noOfColumns];
        for(int i = 0; i < list.size(); i++)
        {
            row[0] = list.get(i).productDetailID;
            row[1] = list.get(i).Name;
           // System.out.println("ID => " + list.get(i).getCategoryID());
           // String Category = list.get(i).getCategoryID();
           // System.out.println("Name => " + Category);
            //row[2] = category.getName();
            row[2] = list.get(i).SubType;
           // row[4] = list.get(i).getAddDate();
            row[3] = list.get(i).UnitSize + " " + list.get(i).UnitCategory;
            row[4] = list.get(i).UnitPrice;
            int orderRow = isPresentInOrderTable(list.get(i).productDetailID);
            if( orderRow != (-1) )
            {
                float availableQty = list.get(i).Quantity;
                float purchasedQty = Float.parseFloat(orderModel.getValueAt(orderRow, 5).toString());
                row[5] = availableQty - purchasedQty;
            }
            else
            {
                row[5] = list.get(i).Quantity;
            }
            model.addRow(row);
        }
    }
    
    private void Show_Customer_In_JTable() throws SQLException, Exception
    {
        ArrayList<Customer> list = Myfunc.getCustomerList();
        DefaultTableModel model = (DefaultTableModel)jTable_customers.getModel();
        // clear jtable content
        model.setRowCount(0);
        int noOfColumns = 5;        // number of columns in user table
        Object[] row = new Object[noOfColumns];
        for(int i = 0; i < list.size(); i++)
        {
            row[0] = list.get(i).getId();
            row[1] = list.get(i).getFirstName();
            row[2] = list.get(i).getLastName();
            row[3] = list.get(i).getPhone();
            row[4] = Myfunc.getCustomerCategoryName(list.get(i).getCustomerCategoryID());
            model.addRow(row);
        }
    
    }
    
    // Show Data In Inputs
    public void ShowCustomer(int index)
    {
        try {
            Customer customer = Myfunc.getCustomerList().get(index);
            jTextField_customerID.setText(customer.getId());
        } catch (SQLException ex) {
            Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,"Problem Loading This Customer's details : " + ex.getMessage());
            jTextField_customerID.setText("");
        }
    }
    
    private void jTable_customersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_customersMouseClicked

        int index = jTable_customers.getSelectedRow();
        ShowCustomer(index);
    }//GEN-LAST:event_jTable_customersMouseClicked

    private void jComboBox_productCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_productCategoryActionPerformed
        try {
            // TODO add your handling code here:
            Show_Products_in_Category_in_JTable();
        } catch (Exception ex) {
            Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,"Problem Loading the Products in The Selected Category : " + ex.getMessage());
            DefaultTableModel model = (DefaultTableModel)jTable_products.getModel();
            // clear jtable content
            model.setRowCount(0);
        }
    }//GEN-LAST:event_jComboBox_productCategoryActionPerformed

    private int isPresentInOrderTable(String id) {
      
        DefaultTableModel orderModel = (DefaultTableModel)jTable_orders.getModel();
        int rows = orderModel.getRowCount();
        //int cols = orderModel.getColumnCount();
        for(int i = 0 ; i < rows ; i++)
        {
            String str = orderModel.getValueAt(i, 0).toString();
            if(str.equals(id))
                return i;
        }
        return -1;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int index = jTable_products.getSelectedRow();
        /*String catName = (String)jComboBox_productCategory.getSelectedItem();
        String catID = Myfunc.getProductCategoryID(catName);
        ArrayList<OrderCustomizedProduct> list = getOrderCustomizedProductsInCategory_by_CategoryID(catID);
        OrderCustomizedProduct product = list.get(index);
        INSERT_ORDER_in_JTable(product);*/
        //Show_ORDERS_in_JTable();
        if(index >= 0)
        {
            DefaultTableModel model = (DefaultTableModel)jTable_products.getModel();
            DefaultTableModel orderModel = (DefaultTableModel)jTable_orders.getModel();

            int rows = model.getRowCount();
            int cols = model.getColumnCount();
            // System.out.println("before vector" + rows + " " + cols);
            //JOptionPane.
            String qtyToPurchase = JOptionPane.showInputDialog("Enter The Quantity :", "");
            //System.out.println(qtyToPurchase);
            if(qtyToPurchase == null)   return;
            float qty1;
            try{
                qty1 = Float.parseFloat(qtyToPurchase);
            }catch(NumberFormatException ex)
            {
                JOptionPane.showMessageDialog(null,"INVALID QUANTITY");
                return;
            }
            if(qty1 == 0)
            {
                JOptionPane.showMessageDialog(null, "Quantity cannot be 0!");
                return;
            }
            String id = model.getValueAt(index, 0).toString();
            String name = model.getValueAt(index, 1).toString();
            String subType = model.getValueAt(index, 2).toString();
            String unitSize = model.getValueAt(index, 3).toString();
            String unitPrice = model.getValueAt(index, 4).toString();
            String availableQty = model.getValueAt(index, 5).toString();

            float qty2 = Float.parseFloat(availableQty); 
            if(qty1 > qty2)
            {
                JOptionPane.showMessageDialog(null, "Unavailable Quantity!");
                return;
            }
            model.setValueAt(Float.toString(qty2 - qty1), index, 5);
            
            int orderRow = isPresentInOrderTable(id);
            if( orderRow != (-1) )
            {
                float newQty = qty1 + Float.parseFloat(orderModel.getValueAt(orderRow, 5).toString());
                orderModel.setValueAt(newQty,orderRow,5);
                //System.out.println(newQty);
                float price = Float.parseFloat(unitPrice);
                //float qty = Float.parseFloat(qtyToPurchase);
                float discount = Float.parseFloat(orderModel.getValueAt(orderRow, 6).toString());
                float amount = (price * newQty) - discount;
                System.out.println(amount);
                orderModel.setValueAt(amount,orderRow,8);
            }
            else
            {
                int noOfColumns = 9;        // number of columns in user table
                Object[] row = new Object[noOfColumns];
                row[0] = id;
                row[1] = name;
                row[2] = subType;
                row[3] = unitSize;
                row[4] = unitPrice;
                row[5] = qtyToPurchase;
                row[6] = "0";
                row[7] = "0";
                float price = Float.parseFloat(unitPrice);
                float qty = Float.parseFloat(qtyToPurchase);
                row[8] = price * qty;
                orderModel.addRow(row);      
            }
            Calculate_and_Show_Total();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_clearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel orderModel = (DefaultTableModel)jTable_orders.getModel();
        int rows = orderModel.getRowCount();
        for(int i = 0 ; i < rows ; i++)
        {
            RemoveProductAtRow(0);
            //rows--;
        }
        //Calculate_and_Show_Total();
    }//GEN-LAST:event_jButton_clearActionPerformed

    private void jTextField_discountPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_discountPriceKeyReleased
        // TODO add your handling code here:
         // allow only numbers
        if(!Character.isDigit(evt.getKeyChar())){
            evt.consume();
        }
       String numberOnly= jLabel_total.getText().replaceAll("[^0-9.]", "");
       System.out.println(numberOnly);
       String dP = jTextField_discountPrice.getText();
       System.out.println(dP);
       if(dP.equals(""))
       {
           //jTextField_discountPrice.setText("0");
           Calculate_and_Show_Total();
           jTextField_discountPercent.setText("0");
           return;
       }
        float discountPrice = Float.parseFloat(dP);//Float.parseFloat(orderModel.getValueAt(row, 6).toString());
        float amount = Float.parseFloat(numberOnly);
        if(discountPrice <= amount)
        {
            float newPrice = amount - discountPrice;
            float discountPercent = 100 * (1 - (newPrice/amount));
            Calculate_and_Show_Total();
            jTextField_discountPercent.setText(Float.toString(discountPercent));
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Discount Price CANNOT be GREATER than The TOTAL AMOUNT!!");
            jTextField_discountPrice.setText("0");
            jTextField_discountPercent.setText("0");
            Calculate_and_Show_Total();
        }
    }//GEN-LAST:event_jTextField_discountPriceKeyReleased

    private void jTextField_discountPercentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_discountPercentKeyReleased
        // TODO add your handling code here:
         // allow only numbers
        if(!Character.isDigit(evt.getKeyChar())){
            evt.consume();
        }
       String numberOnly= jLabel_total.getText().replaceAll("[^0-9.]", "");
       System.out.println(numberOnly);
       String dP = jTextField_discountPercent.getText();
       System.out.println(dP);
       if(dP.equals(""))
       {
           jTextField_discountPrice.setText("0");
           Calculate_and_Show_Total();
           //jTextField_discountPercent.setText("0");
           return;
       }
        float discountPercent = Float.parseFloat(dP);//Float.parseFloat(orderModel.getValueAt(row, 6).toString());
        if(discountPercent < 0 || discountPercent > 100)
        {
            JOptionPane.showMessageDialog(null, "Discount Percent should be between 0% and 100%!!");
            jTextField_discountPrice.setText("0");
            jTextField_discountPercent.setText("0");
            Calculate_and_Show_Total();
        }
        float amount = Float.parseFloat(numberOnly);
        float newPrice = amount * (1 - (discountPercent/100));
        float discountPrice = amount - newPrice;
        if(discountPrice <= amount)
        {
            jTextField_discountPrice.setText(Float.toString(discountPrice));
            Calculate_and_Show_Total();
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Discount Price CANNOT be GREATER than The TOTAL AMOUNT!!");
            jTextField_discountPrice.setText("0");
            jTextField_discountPercent.setText("0");
            Calculate_and_Show_Total();
        }
    }//GEN-LAST:event_jTextField_discountPercentKeyReleased

    private void jButton_removeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_removeOrderActionPerformed
        // TODO add your handling code here:
        //DefaultTableModel orderModel = (DefaultTableModel)jTable_orders.getModel();
        int row = jTable_orders.getSelectedRow();
        if(row < 0) return;
        RemoveProductAtRow(row);
        Calculate_and_Show_Total();
    }//GEN-LAST:event_jButton_removeOrderActionPerformed

    private void jButton_showAllOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_showAllOrdersActionPerformed
        // TODO add your handling code here:
        All_Orders_Form of = new All_Orders_Form();
        of.setVisible(true);
        of.pack();
        of.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        of.setLocationRelativeTo(null);
        //dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jButton_showAllOrdersActionPerformed

    private void jButton_paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_paymentActionPerformed

        // TODO add your handling code here:
        //Do you need to refresh the products table after InsertOrder()????For quantity??
        if(InsertOrder())
        {
            String orderID = jTextField_orderID.getText();
            jTextField_orderID.setText(IDGenerator.getIDforOrder());
            DefaultTableModel orderModel = (DefaultTableModel)jTable_orders.getModel();
            orderModel.setRowCount(0);  //clear the order table
            jLabel_total.setText("0.0/-");
            jTextField_discountPrice.setText("");
            jTextField_discountPercent.setText("");
            PAYMENT_MODE_SELECTION_FORM pmf = new PAYMENT_MODE_SELECTION_FORM(orderID);
            pmf.setVisible(true);
            pmf.pack();
            pmf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            pmf.setLocationRelativeTo(null);
            //dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        }
        
    }//GEN-LAST:event_jButton_paymentActionPerformed

    private void jButton_refreshOrderIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_refreshOrderIDActionPerformed
        // TODO add your handling code here:
        jTextField_orderID.setText(IDGenerator.getIDforOrder());
    }//GEN-LAST:event_jButton_refreshOrderIDActionPerformed

    private void jTextField_discountPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_discountPriceKeyTyped
       // allow only numbers
       if(!Character.isDigit(evt.getKeyChar())){
           evt.consume();
       }
    }//GEN-LAST:event_jTextField_discountPriceKeyTyped

    private void jCheckBox_generalCustomerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox_generalCustomerItemStateChanged
        // TODO add your handling code here:
        if(jCheckBox_generalCustomer.isSelected())
        {
            jTable_customers.setVisible(false);
            jTextField_customerID.setText("GENERAL");
        }
        else
        {
            jTable_customers.setVisible(true);
            jTextField_customerID.setText("");
        }
    }//GEN-LAST:event_jCheckBox_generalCustomerItemStateChanged

    private boolean isLessThanCostPrice(String productDetailID,float sellingPrice) throws Exception
    {
        /*
            Check if the price of the product is greater than the costPrice
        */
        Connection con = null;
        String query = "SELECT * FROM product_detail WHERE id = \'" + productDetailID + "\'";

        Statement st = null;
        ResultSet rs = null;
        boolean result = false;
        
        try {
            con = My_CNX.getConnection();
            st = con.createStatement();
            rs = st.executeQuery(query);
           
            if(rs.next())
            {
                float costPrice = rs.getFloat("CostPrice");
                if(sellingPrice < costPrice)
                    result = true;
            }
            else
            {
                rs.close();
                st.close();
                con.close();
                throw new Exception("Product Detail ID Not FOUND!");
            }
            rs.close();
            st.close();
            con.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            try { if(rs != null)  rs.close(); } catch(SQLException e){}
            try { if(st != null)  st.close(); } catch(SQLException e){}
            try { if(con != null)  con.close(); } catch(SQLException e){}
        }
        return result;
    }
    
    private boolean flag = true;
    
    private void setAmount(int row,int col) throws Exception
    {
        if(flag == false)   return;
        DefaultTableModel orderModel = (DefaultTableModel)jTable_orders.getModel();
        String id = orderModel.getValueAt(row, 0).toString();
        float price = Float.parseFloat(orderModel.getValueAt(row, 4).toString());
        float qty = Float.parseFloat(orderModel.getValueAt(row, 5).toString());
        float discountPrice = 0,discountPercent;
        if(col == 4 && isLessThanCostPrice(id,price))
        {
            JOptionPane.showMessageDialog(null, "SELLING Price CANNOT be LESS than COST Price!!");
            //price = Myfunc.getProductDetail_by_ProductDetailID(id).getUnitPrice();
            //orderModel.setValueAt(price, row, 4);
            //orderModel.removeRow(row);
            //Calculate_and_Show_Total();
            // TODO : take the old value (price)from jTable_products OR DATABaSE(BETTER)
            Product_detail productDetail = Myfunc.getProductDetail_by_ProductDetailID(id,false);
            flag = false;
            orderModel.setValueAt(productDetail.getUnitPrice(), row, 4);
            flag = true;
            return;
        }
        else if(col == 6)    //if Discount in price is updated
        {
            discountPrice = Float.parseFloat(orderModel.getValueAt(row, 6).toString());
            //orderModel.setValueAt("0", row, 7);
            //calculate and set discount percent
            //you can't set %...otherwise you wil run into an infinite loop
            //using flag to resolve the issue
            if(discountPrice <= price)
            {
                float newPrice = price - discountPrice;
                if(isLessThanCostPrice(id,newPrice))
                {
                    JOptionPane.showMessageDialog(null, "SELLING Price CANNOT be LESS than COST Price!!");
                    //orderModel.removeRow(row);
                    flag = false;
                    orderModel.setValueAt("0", row, 6); // TODO : Check this
                    flag = true;
                    return;
                }
                discountPercent = 100 * (1 - ((float)newPrice/price));
                flag = false;
                orderModel.setValueAt(discountPercent, row, 7);
                flag = true;
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Discount Price CANNOT be GREATER than Unit Price!!");
                flag = false;
                orderModel.setValueAt("0", row, 6); // TODO : Check this
                flag = true;
                return;
            }
        }
        else if(col == 7)   //if Discount in percent is updated
        {
            discountPercent = Float.parseFloat(orderModel.getValueAt(row, 7).toString());
            if(discountPercent >= 0 && discountPercent <=100)
            {
                float newPrice = price * (1 - (discountPercent/100));
                if(isLessThanCostPrice(id,newPrice))
                {
                    JOptionPane.showMessageDialog(null, "SELLING Price CANNOT be LESS than COST Price!!");
                    //orderModel.removeRow(row);
                    flag = false;
                    orderModel.setValueAt("0", row, 6); // TODO : Check this
                    orderModel.setValueAt("0", row, 7); // TODO : Check this
                    flag = true;
                    return;
                }
                discountPrice = price - newPrice;
                //orderModel.removeTableModelListener(jTable_orders.);
                flag = false;
                orderModel.setValueAt(discountPrice, row, 6);
                flag = true;
               // addTableListener();
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Put Percentage between 0% and 100%!");
                flag = false;
                orderModel.setValueAt("0", row, 7); // TODO : Check this
                flag = true;
                return;
            }
        }
        else if(col == 8)   //If Amount is updated
        {
            flag = false;
            orderModel.setValueAt("0", row, 6);
            orderModel.setValueAt("0", row, 7);
            flag = true;
            float amount = Float.parseFloat(orderModel.getValueAt(row, 8).toString());
            float newPrice = (float)amount/qty;
            if(isLessThanCostPrice(id,newPrice))
            {
                JOptionPane.showMessageDialog(null, "SELLING Price CANNOT be LESS than COST Price!!");
                //amount = (price - discountPrice) * qty;
                //System.out.println(amount);
                //flag = false;
                //orderModel.setValueAt(amount, row, 8);
                //flag = true;
                //orderModel.removeRow(row);  //removing row is necessary to maintain integrity of data
                //RemoveProductAtRow(row);
                //Calculate_and_Show_Total();
                amount = (price - discountPrice) * qty;
                System.out.println(amount);
                flag = false;
                orderModel.setValueAt(amount, row, 8);
                flag = true;
                return;
            }
            orderModel.setValueAt(newPrice, row, 4);   //set Unit Price accordingly
            Calculate_and_Show_Total();
            return;
        }
        float amount = (price - discountPrice) * qty;
        //System.out.println(amount);
        flag = false;
        orderModel.setValueAt(amount, row, 8);
        flag = true;
        Calculate_and_Show_Total();
    }
    
    private void addTableListener() {
        DefaultTableModel orderModel = (DefaultTableModel)jTable_orders.getModel();
        //int row = jTable_orders.getSelectedRow();
        int cols = jTable_orders.getColumnCount();
        orderModel.addTableModelListener((TableModelEvent tme) -> {
            if (tme.getType() == TableModelEvent.UPDATE) {
                /*This if statement has resolved the problem for last column only
                  But the "Flag" system has solved the problem in general for all the
                  required columns...COOL!
                */
                //if(tme.getColumn() == (cols-1))     return;     //don't go on infinite loop..don't listen to Amount's(last column) Update
                int row = tme.getFirstRow();
                int col = tme.getColumn();
                /*System.out.println("");
                System.out.println("Cell " + tme.getFirstRow() + ", "
                        + tme.getColumn() + " changed. The new value: "
                        + orderModel.getValueAt(tme.getFirstRow(),
                                tme.getColumn()));
                */
                try {
                    setAmount(row,col);
                } catch (Exception ex) {
                    Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null,"Problem Changing the data : " + ex.getMessage());
                    RemoveProductAtRow(row);        // removing the if there is some error
                }
            }
        });
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MANAGE_ORDERS_FORM().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_clear;
    private javax.swing.JButton jButton_payment;
    private javax.swing.JButton jButton_refreshOrderID;
    private javax.swing.JButton jButton_removeOrder;
    private javax.swing.JButton jButton_showAllOrders;
    private javax.swing.JCheckBox jCheckBox_generalCustomer;
    private javax.swing.JComboBox<String> jComboBox_productCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel_total;
    private javax.swing.JLabel jLabel_totalRs;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable_customers;
    private javax.swing.JTable jTable_orders;
    private javax.swing.JTable jTable_products;
    private javax.swing.JTextField jTextField_customerID;
    private javax.swing.JTextField jTextField_discountPercent;
    private javax.swing.JTextField jTextField_discountPrice;
    private javax.swing.JTextField jTextField_orderDate;
    private javax.swing.JTextField jTextField_orderID;
    // End of variables declaration//GEN-END:variables

    
}
