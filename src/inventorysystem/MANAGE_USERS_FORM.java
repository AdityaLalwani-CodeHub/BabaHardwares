/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventorysystem;

import CLASS.C_Users;
import CLASS.IDGenerator;
import CLASS.Myfunc;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aditya
 */
public class MANAGE_USERS_FORM extends javax.swing.JFrame {
     String ImgPath = null;
     ArrayList<C_Users> list;
     
    /**
     * Creates new form MANAGE_USERS_FORM
     */
    public MANAGE_USERS_FORM() {
        initComponents();
         try {
             list = Myfunc.getUserList();
         } catch (SQLException ex) {
             Logger.getLogger(MANAGE_USERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
             JOptionPane.showMessageDialog(null,"Problem Loading Users List : " + ex.getMessage());
             this.dispose();
             return;
         }
        jTextField_id.setText(IDGenerator.getIDforUser());
        Show_Users_In_JTable();
        // TODO generate id
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Users = new javax.swing.JTable();
        jButton_insert = new javax.swing.JButton();
        jButton_edit = new javax.swing.JButton();
        jButton_remove = new javax.swing.JButton();
        jLabel_id = new javax.swing.JLabel();
        jLabel_username = new javax.swing.JLabel();
        jLabel_password = new javax.swing.JLabel();
        jLabel_fullname = new javax.swing.JLabel();
        jLabel_telephone = new javax.swing.JLabel();
        jLabel_email = new javax.swing.JLabel();
        jButton_clear = new javax.swing.JButton();
        jTextField_id = new javax.swing.JTextField();
        jTextField_username = new javax.swing.JTextField();
        jPasswordField = new javax.swing.JPasswordField();
        jTextField_fullname = new javax.swing.JTextField();
        jTextField_telephone = new javax.swing.JTextField();
        jTextField_email = new javax.swing.JTextField();
        jButton_uploadImage = new javax.swing.JButton();
        jLabel_image = new javax.swing.JLabel();
        jButton_refresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("USERS");
        setIconImage((new ImageIcon("img.jpg")).getImage());

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        jTable_Users.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable_Users.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "fullname", "username", "Tel", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Users.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_UsersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Users);

        jButton_insert.setBackground(new java.awt.Color(0, 153, 51));
        jButton_insert.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton_insert.setForeground(new java.awt.Color(255, 255, 255));
        jButton_insert.setText("Insert");
        jButton_insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_insertActionPerformed(evt);
            }
        });

        jButton_edit.setBackground(new java.awt.Color(0, 153, 255));
        jButton_edit.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton_edit.setForeground(new java.awt.Color(255, 255, 255));
        jButton_edit.setText("Edit");
        jButton_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_editActionPerformed(evt);
            }
        });

        jButton_remove.setBackground(new java.awt.Color(255, 102, 102));
        jButton_remove.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton_remove.setForeground(new java.awt.Color(255, 255, 255));
        jButton_remove.setText("Remove");
        jButton_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_removeActionPerformed(evt);
            }
        });

        jLabel_id.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel_id.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_id.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel_id.setText("ID:");

        jLabel_username.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel_username.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_username.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel_username.setText("Username:");

        jLabel_password.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel_password.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_password.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel_password.setText("Password:");

        jLabel_fullname.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel_fullname.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_fullname.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel_fullname.setText("FullName:");

        jLabel_telephone.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel_telephone.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_telephone.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel_telephone.setText("Tel:");

        jLabel_email.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel_email.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_email.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel_email.setText("Email:");

        jButton_clear.setBackground(new java.awt.Color(255, 102, 51));
        jButton_clear.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton_clear.setForeground(new java.awt.Color(255, 255, 255));
        jButton_clear.setText("Clear");
        jButton_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_clearActionPerformed(evt);
            }
        });

        jTextField_id.setEditable(false);

        jTextField_telephone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_telephoneKeyTyped(evt);
            }
        });

        jButton_uploadImage.setBackground(new java.awt.Color(204, 204, 0));
        jButton_uploadImage.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jButton_uploadImage.setForeground(new java.awt.Color(255, 255, 255));
        jButton_uploadImage.setText("Upload Image");
        jButton_uploadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_uploadImageActionPerformed(evt);
            }
        });

        jLabel_image.setBackground(new java.awt.Color(255, 255, 255));
        jLabel_image.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_image.setOpaque(true);

        jButton_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton_insert, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton_uploadImage)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel_image, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel_username, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel_password)
                                    .addComponent(jLabel_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel_fullname)
                                    .addComponent(jLabel_email, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel_telephone, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField_email)
                                .addComponent(jTextField_username)
                                .addComponent(jPasswordField)
                                .addComponent(jTextField_fullname)
                                .addComponent(jTextField_telephone)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jTextField_id, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 31, Short.MAX_VALUE))))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_remove, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_id, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_id)
                            .addComponent(jButton_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_username)
                            .addComponent(jTextField_username, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_password)
                            .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_fullname)
                            .addComponent(jTextField_fullname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_telephone, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_telephone))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_email, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_email))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(jButton_uploadImage, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addComponent(jLabel_image, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_remove, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_insert, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // Check Input Fields
    public boolean checkInputs()
    {
        if(
              jTextField_username.getText() == null
           || jPasswordField.getPassword() == null
           || jTextField_telephone.getText() == null
           || jTextField_email.getText() == null
           || jTextField_fullname.getText() == null
                || jTextField_id.getText().equals("")
          ){
            return false;
        }
        else{
            try{
                //Float.parseFloat(txt_price.getText());
                // TODO check phone number and email
                if(jTextField_username.getText().toLowerCase().equals("admin") || jTextField_fullname.getText().toLowerCase().equals("admin"))
                {
                    JOptionPane.showMessageDialog(null,"There Can Be Only One ADMIN! Data Rejected!");
                    return false;
                }
                //return true;
            }catch(Exception ex)
            {
                return false;
            }
        }
         return true;
    }
    
    private void Show_Users_In_JTable()
    {
        DefaultTableModel model = (DefaultTableModel)jTable_Users.getModel();
        // clear jtable content
        model.setRowCount(0);
        int noOfColumns = 6;        // number of columns in user table
        Object[] row = new Object[noOfColumns];
        for(int i = 0; i < list.size(); i++)
        {
            row[0] = list.get(i).getId();
            row[1] = list.get(i).getFullName();
            row[2] = list.get(i).getUserName();
            //row[3] = list.get(i).getPassword();
            row[3] = list.get(i).getPhone();
            row[4] = list.get(i).getEmail();
            row[5] = list.get(i).getImage();
                    
            model.addRow(row);
        }
    
    }
    
    // Show Data In Inputs
    public void ShowItem(int index)
    {
            jTextField_id.setText(list.get(index).getId());
            jTextField_fullname.setText(list.get(index).getFullName());
            jTextField_username.setText(list.get(index).getUserName());
            jPasswordField.setText(list.get(index).getPassword());
            jTextField_telephone.setText(list.get(index).getPhone());
            jTextField_email.setText(list.get(index).getEmail());
            if(list.get(index).getImage() != null)
            jLabel_image.setIcon(ResizeImage(null, list.get(index).getImage()));
    }

    private void jButton_insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_insertActionPerformed
        // TODO add your handling code here:
         if(checkInputs())
        {
            Connection con = null;
            PreparedStatement ps = null;
            Savepoint savepoint = null;
            
            try {
                con = My_CNX.getConnection();
                //System.out.println("database connected");
                con.setAutoCommit(false);
                //set a Savepoint
                savepoint = con.setSavepoint("Savepoint1");
                if(ImgPath!=null)
                {
                    ps = con.prepareStatement("INSERT INTO users(id,fullname,username,password,phone,email,picture)"
                        + "values(?,?,?,?,?,?,?) ");
                    ps.setString(1, jTextField_id.getText());
                    ps.setString(2, jTextField_fullname.getText());
                    ps.setString(3, jTextField_username.getText());
                    ps.setString(4, String.valueOf(jPasswordField.getPassword()));
                    ps.setString(5, jTextField_telephone.getText());
                    ps.setString(6, jTextField_email.getText());

                   // System.out.println("photo left");
                    InputStream img = new FileInputStream(new File(ImgPath));
                    ps.setBlob(7, img);
                    ps.executeUpdate();
                    ImgPath = null;
                    ps.close();
                }
                else
                {
                    ps = con.prepareStatement("INSERT INTO users(id,fullname,username,password,phone,email)"
                        + "values(?,?,?,?,?,?) ");
                    ps.setString(1, jTextField_id.getText());
                    ps.setString(2, jTextField_fullname.getText());
                    ps.setString(3, jTextField_username.getText());
                    ps.setString(4, String.valueOf(jPasswordField.getPassword()));
                    ps.setString(5, jTextField_telephone.getText());
                    ps.setString(6, jTextField_email.getText());
                    ps.executeUpdate();
                    ImgPath = null;
                    ps.close();
                }
                con.commit();
                con.close();
                JOptionPane.showMessageDialog(null,"USER ADDED SUCCESSFULLY :-) ");
            } catch (FileNotFoundException | SQLException ex) {
                 JOptionPane.showMessageDialog(null,"ADDING USER FAILED : " + ex.getMessage());
                try {
                    if(con != null) {
                        con.rollback(savepoint);
                    }
                } catch (SQLException ex1) {
                    Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }finally
            {
                try { if(ps != null)  ps.close(); } catch(SQLException e){}
                try { if(con != null)  con.close(); } catch(SQLException e){}
                try {
                    list = Myfunc.getUserList();
                    Show_Users_In_JTable();
                } catch (SQLException ex) {
                    Logger.getLogger(MANAGE_CUSTOMERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "USER List could Not Be Refreshed : " + ex.getMessage());
                    this.dispose();
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "One Or More Field Are Empty");
        }
       
        // only for test
       // System.out.println("Name => "+txt_name.getText());
      //  System.out.println("Price => "+txt_price.getText());
      //  System.out.println("Image => "+ImgPath);
                                            
    }//GEN-LAST:event_jButton_insertActionPerformed

     public ImageIcon ResizeImage(String imagePath, byte[] pic)
    {
        ImageIcon myImage = null;
        
        if(imagePath != null)
        {
            myImage = new ImageIcon(imagePath);
        }else{
            myImage = new ImageIcon(pic);
        }
        
        Image img = myImage.getImage();
        Image img2 = img.getScaledInstance(jLabel_image.getWidth(), jLabel_image.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img2);
        return image;
        
    }
     
    private void jButton_uploadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_uploadImageActionPerformed
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
       
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "jpg","png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = file.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            jLabel_image.setIcon(ResizeImage(path, null));
            ImgPath = path;
        }
        else{
            System.out.println("No File Selected");
        }
    }//GEN-LAST:event_jButton_uploadImageActionPerformed

    private void jTextField_telephoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_telephoneKeyTyped

         // allow only numbers
       if(!Character.isDigit(evt.getKeyChar())){
           evt.consume();
       }
    }//GEN-LAST:event_jTextField_telephoneKeyTyped

    private void jButton_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_editActionPerformed
        
        if(checkInputs() && jTextField_id.getText() != null)
        {
            String UpdateQuery = null;
            PreparedStatement ps = null;
            Connection con = null;
            Savepoint savepoint1 = null; 
           
            // update without image
            if(ImgPath == null)
            {
                try {
                    con = My_CNX.getConnection();
                    con.setAutoCommit(false);
                    //set a Savepoint
                    savepoint1 = con.setSavepoint("Savepoint1");
                    
                    UpdateQuery = "UPDATE users SET username = ?, password = ?"
                            + ", fullname = ? , phone = ? , email = ? WHERE id = ?";
                    ps = con.prepareStatement(UpdateQuery);
                   
                    ps.setString(6, jTextField_id.getText());
                    ps.setString(3, jTextField_fullname.getText());
                    ps.setString(1, jTextField_username.getText());
                    ps.setString(2, String.valueOf(jPasswordField.getPassword()));
                    ps.setString(4, jTextField_telephone.getText());
                    ps.setString(5, jTextField_email.getText());
                   
                    ps.executeUpdate();
                    ImgPath = null;
                    ps.close();
                    con.commit();
                    con.close();
                    JOptionPane.showMessageDialog(null, "Data Updated Successfully :-)");

                } catch (Exception ex) {
                     JOptionPane.showMessageDialog(null,"UPDATING USER DETAILS FAILED : " + ex.getMessage());
                    try {
                        if(con != null) {
                            con.rollback(savepoint1);
                        }
                    } catch (SQLException ex1) {
                        Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }finally
                {
                    try { if(ps != null)  ps.close(); } catch(SQLException e){}
                    try { if(con != null)  con.close(); } catch(SQLException e){}
                    try {
                        list = Myfunc.getUserList();
                        Show_Users_In_JTable();
                    } catch (SQLException ex) {
                        Logger.getLogger(MANAGE_CUSTOMERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, "USER List could Not Be Refreshed : " + ex.getMessage());
                        this.dispose();
                    }
                }
               
            }
            // update With Image
            else{
               
                try{
                InputStream img = new FileInputStream(new File(ImgPath));
                    con = My_CNX.getConnection();
                    con.setAutoCommit(false);
                    //set a Savepoint
                    savepoint1 = con.setSavepoint("Savepoint1");
                 UpdateQuery = "UPDATE users SET username = ?, password = ?"
                            + ", fullname = ? , phone = ? , email = ? , picture = ? WHERE id = ?";
               
                  ps = con.prepareStatement(UpdateQuery);
                   
                   ps.setString(7, jTextField_id.getText());
                    ps.setString(3, jTextField_fullname.getText());
                    ps.setString(1, jTextField_username.getText());
                    ps.setString(2, String.valueOf(jPasswordField.getPassword()));
                    ps.setString(4, jTextField_telephone.getText());
                    ps.setString(5, jTextField_email.getText());
                   
                    ps.setBlob(6, img);

                    ps.executeUpdate();
                    ImgPath = null;
                    ps.close();
                    con.commit();
                    con.close();
                    //JOptionPane.showMessageDialog(null, "Data Updated");

                } catch (Exception ex) {
                     JOptionPane.showMessageDialog(null,"UPDATING USER DETAILS FAILED : " + ex.getMessage());
                    try {
                        if(con != null) {
                            con.rollback(savepoint1);
                        }
                    } catch (SQLException ex1) {
                        Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }finally
                {
                    try { if(ps != null)  ps.close(); } catch(SQLException e){}
                    try { if(con != null)  con.close(); } catch(SQLException e){}
                    try {
                        list = Myfunc.getUserList();
                        Show_Users_In_JTable();
                    } catch (SQLException ex) {
                        Logger.getLogger(MANAGE_CUSTOMERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, "USER List could Not Be Refreshed : " + ex.getMessage());
                        this.dispose();
                    }
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "One Or More Fields Are Empty Or Wrong");
        }
    }//GEN-LAST:event_jButton_editActionPerformed

    private void jButton_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_removeActionPerformed

        if(jTextField_id.getText().toLowerCase().equals("admin"))
        {
            JOptionPane.showMessageDialog(null,"ADMIN cannot be removed!");
            return;
        }
        if(!jTextField_id.getText().equals(""))
        {
            int i = JOptionPane.showConfirmDialog(null, "DELETING the USER " + jTextField_id.getText() + "! ALL DETAILS WILL BE DELETED!  ARE YOU SURE??", "WARNING",JOptionPane.YES_NO_OPTION );
            if(i != 0) return;      //NO
            Connection con = null;
            PreparedStatement ps = null;
            Savepoint savepoint1 = null;
            
            try {
                con = My_CNX.getConnection();
                con.setAutoCommit(false);
                //set a Savepoint
                savepoint1 = con.setSavepoint("Savepoint1");
                ps = con.prepareStatement("DELETE FROM users WHERE id = ?");
                String id = jTextField_id.getText();
                ps.setString(1, id);
                ps.executeUpdate();
                ps.close();
                con.commit();
                con.close();
                //JOptionPane.showMessageDialog(null, "Data Updated");

            } catch (SQLException ex) {
                 JOptionPane.showMessageDialog(null,"DELETING USER FAILED : " + ex.getMessage());
                try {
                    if(con != null) {
                        con.rollback(savepoint1);
                    }
                } catch (SQLException ex1) {
                    Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }finally
            {
                try { if(ps != null)  ps.close(); } catch(SQLException e){}
                try { if(con != null)  con.close(); } catch(SQLException e){}
                try {
                    list = Myfunc.getUserList();
                    Show_Users_In_JTable();
                } catch (SQLException ex) {
                    Logger.getLogger(MANAGE_CUSTOMERS_FORM.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "USER List could Not Be Refreshed : " + ex.getMessage());
                    this.dispose();
                }
            }
         
        }else{
            JOptionPane.showMessageDialog(null, "USER Not Deleted : No Id To Delete");
        }
    }//GEN-LAST:event_jButton_removeActionPerformed

    private void jTable_UsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_UsersMouseClicked
       
        int index = jTable_Users.getSelectedRow();
        ShowItem(index);
    }//GEN-LAST:event_jTable_UsersMouseClicked

    private void jButton_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_clearActionPerformed
        // TODO add your handling code here:
        jTextField_id.setText("");
        jTextField_fullname.setText("");
        jTextField_username.setText("");
        jPasswordField.setText("");
        jTextField_telephone.setText("");
        jTextField_email.setText("");
        jLabel_image.setIcon(null);
        ImgPath = null;
    }//GEN-LAST:event_jButton_clearActionPerformed

    private void jButton_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_refreshActionPerformed
        // TODO add your handling code here:
        jTextField_id.setText(IDGenerator.getIDforUser());
    }//GEN-LAST:event_jButton_refreshActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MANAGE_USERS_FORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MANAGE_USERS_FORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MANAGE_USERS_FORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MANAGE_USERS_FORM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MANAGE_USERS_FORM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_clear;
    private javax.swing.JButton jButton_edit;
    private javax.swing.JButton jButton_insert;
    private javax.swing.JButton jButton_refresh;
    private javax.swing.JButton jButton_remove;
    private javax.swing.JButton jButton_uploadImage;
    private javax.swing.JLabel jLabel_email;
    private javax.swing.JLabel jLabel_fullname;
    private javax.swing.JLabel jLabel_id;
    private javax.swing.JLabel jLabel_image;
    private javax.swing.JLabel jLabel_password;
    private javax.swing.JLabel jLabel_telephone;
    private javax.swing.JLabel jLabel_username;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Users;
    private javax.swing.JTextField jTextField_email;
    private javax.swing.JTextField jTextField_fullname;
    private javax.swing.JTextField jTextField_id;
    private javax.swing.JTextField jTextField_telephone;
    private javax.swing.JTextField jTextField_username;
    // End of variables declaration//GEN-END:variables

   
}
