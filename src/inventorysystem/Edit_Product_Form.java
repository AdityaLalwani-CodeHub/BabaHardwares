/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventorysystem;

import CLASS.IDGenerator;
import CLASS.Myfunc;
import CLASS.Product;
import CLASS.Product_detail;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aditya
 */
public class Edit_Product_Form extends javax.swing.JFrame {

    String ImgPath = null;
    ArrayList<String> addedProductDetailIDList;
    ArrayList<String> removedProductDetailIDList;
    //ArrayList<String> updatedProductDetailIDList;
    ArrayList<Product_detail> productList;
    Product product;
    /**
     * Creates new form Edit_Product_Form
     * @param product
     */
    public Edit_Product_Form(Product product) {
        initComponents();
        this.product = product;
        try {
            productList = Myfunc.getProductDetailList(product);
        } catch (SQLException ex) {
            Logger.getLogger(Edit_Product_Form.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Problem Loading the Product : " + ex.getMessage());
            this.dispose();
        }
        addedProductDetailIDList = new ArrayList<>();
        removedProductDetailIDList = new ArrayList<>();
        //updatedProductDetailIDList = new ArrayList<>();
        try {
            show_Product();
        } catch (Exception ex) {
            Logger.getLogger(Edit_Product_Form.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Problem Loading the Product Details : " + ex.getMessage());
            this.dispose();
        }
    }
    
    private void show_Product() throws Exception
    {
        jTextField_id.setText(product.getId());
        String catName = Myfunc.getProductCategoryName(product.getCategoryID());
        jComboBox_category.setSelectedItem(catName);
        jTextField_name.setText(product.getName());
        jTextField_subType.setText(product.getSubType());
        String unitName = Myfunc.getUnitCategoryName(product.getUnitCategoryID());
        jComboBox_measuringUnit.setSelectedItem(unitName);
        jTextArea_description.setText(product.getDescription());
        jLabel_image.setIcon(ResizeImage(null,product.getImage()));
        
        Show_Product_Detail_in_JTable();
    }
    
    private void Show_Product_Detail_in_JTable()
    {
        DefaultTableModel model = (DefaultTableModel)jTable_product_detail.getModel();
        // clear jtable content
        model.setRowCount(0);
        int noOfColumns = 5;        // number of columns in user table
        Object[] row = new Object[noOfColumns];
        for(int i = 0; i < productList.size(); i++)
        {
            row[0] = productList.get(i).getId();
            row[1] = productList.get(i).getUnitSize();
            row[2] = productList.get(i).getUnitPrice();
            row[3] = productList.get(i).getQuantity();
            row[4] = productList.get(i).getCostPrice();
            model.addRow(row);
        }
    }
    
     public ImageIcon ResizeImage(String imagePath, byte[] pic)
    {
        ImageIcon myImage = null;
        
        if(imagePath != null)
        {
            myImage = new ImageIcon(imagePath);
        }else if(pic != null) {
            try
            {
                myImage = new ImageIcon(pic);
            }catch(Exception ex)
            {
                System.out.println("here it is");
            }
        }
        else
            return null;
        
        Image img = myImage.getImage();
        Image img2 = img.getScaledInstance(jLabel_image.getWidth(), jLabel_image.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img2);
        return image;
        
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox_category = new javax.swing.JComboBox<>();
        jTextField_name = new javax.swing.JTextField();
        jTextField_subType = new javax.swing.JTextField();
        jComboBox_measuringUnit = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_description = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel_image = new javax.swing.JLabel();
        jButton_selectImage = new javax.swing.JButton();
        jButton_cancel = new javax.swing.JButton();
        jButton_update = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jTextField_id = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_product_detail = new javax.swing.JTable();
        jButton_addARow = new javax.swing.JButton();
        jButton_removeRow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EDIT PRODUCT");
        setIconImage((new ImageIcon("img.jpg")).getImage());

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Category :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Name :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("SubType :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Measuring Unit :");

        try
        {
            String[] catList = Myfunc.getAllProductCategoryNames();
            jComboBox_category.setModel(new javax.swing.DefaultComboBoxModel<>(catList));
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Problem Loading Product Category List : " + ex.getMessage());
            this.dispose();
        }

        jTextField_name.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jTextField_subType.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        try
        {
            String[] unitList = Myfunc.getAllUnits();
            jComboBox_measuringUnit.setModel(new javax.swing.DefaultComboBoxModel<>(unitList));
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null,"Problem Loading Measuring Units : " + ex.getMessage());
            this.dispose();
        }

        jTextArea_description.setColumns(20);
        jTextArea_description.setRows(5);
        jScrollPane1.setViewportView(jTextArea_description);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Description :");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Description :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Image :");

        jLabel_image.setBackground(new java.awt.Color(255, 255, 255));
        jLabel_image.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_image.setOpaque(true);

        jButton_selectImage.setText("Select a Picture");
        jButton_selectImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_selectImageActionPerformed(evt);
            }
        });

        jButton_cancel.setBackground(new java.awt.Color(255, 51, 0));
        jButton_cancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_cancel.setForeground(new java.awt.Color(255, 255, 255));
        jButton_cancel.setText("CANCEL");
        jButton_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cancelActionPerformed(evt);
            }
        });

        jButton_update.setBackground(new java.awt.Color(51, 102, 0));
        jButton_update.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_update.setForeground(new java.awt.Color(255, 255, 255));
        jButton_update.setText("Update");
        jButton_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_updateActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("ID :");

        jTextField_id.setEditable(false);

        jTable_product_detail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Detail ID", "Unit Size", "Unit Price (Selling)", "Quantity", "Cost Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        addTableListener();
        jScrollPane2.setViewportView(jTable_product_detail);

        jButton_addARow.setBackground(new java.awt.Color(0, 153, 204));
        jButton_addARow.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_addARow.setForeground(new java.awt.Color(255, 255, 255));
        jButton_addARow.setText("Add a Row");
        jButton_addARow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_addARowActionPerformed(evt);
            }
        });

        jButton_removeRow.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_removeRow.setText("Remove Selected Row");
        jButton_removeRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_removeRowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBox_measuringUnit, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField_subType, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_name, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox_category, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                            .addComponent(jLabel_image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_selectImage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(jButton_update, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton_addARow, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_removeRow, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_id, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(127, 127, 127)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(607, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox_category, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(jTextField_id, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField_name, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField_subType, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jComboBox_measuringUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(jLabel6)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel_image, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_addARow, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                            .addComponent(jButton_removeRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_selectImage)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_update, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(281, 281, 281)
                    .addComponent(jLabel4)
                    .addContainerGap(387, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_selectImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_selectImageActionPerformed
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));

        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "jpg","png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = file.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            jLabel_image.setIcon(ResizeImage(path, null));
            ImgPath = path;
        }
        else{
            System.out.println("No File Selected");
        }
    }//GEN-LAST:event_jButton_selectImageActionPerformed

    private void jButton_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cancelActionPerformed
    /*    jTextField_name.setText("");
        jTextField_subType.setText("");
        jTextArea_description.setText("");
        DefaultTableModel model = (DefaultTableModel)jTable_product_detail.getModel();
        // clear jtable content
        model.setRowCount(0);
        jLabel_image.setIcon(null);
        */
        JOptionPane.showMessageDialog(null,"Editing Cancelled");
        this.dispose();
    }//GEN-LAST:event_jButton_cancelActionPerformed

    // Check Input Fields
    public boolean checkInputs()
    {
        if(
              jTextField_name.getText() == null
          ){
            return false;
        }
        else{
            try{
                //Float.parseFloat(txt_price.getText());
                // TODO check phone number and email
                //table should have no empty strings
                DefaultTableModel model = (DefaultTableModel)jTable_product_detail.getModel();
                int rows = model.getRowCount();
                int cols = model.getColumnCount();
                for(int i = 0; i < rows ; i++)
                {
                    for(int j = 1; j < cols ; j++)  // not the 1st column
                        if(model.getValueAt(i, j).toString().equals(""))
                        {
                            JOptionPane.showMessageDialog(null, "Field is Empty at row : " + (i+1) + " , col : " + (j+1));
                            return false;
                        }
                        else
                        {
                            try
                            {
                                Float.parseFloat(model.getValueAt(i, j).toString());
                            }catch(NumberFormatException ex)
                            {
                                JOptionPane.showMessageDialog(null, "Please Enter valid numbers at row : " + (i+1) + " , col : " + (j+1) + " => "+ ex.getMessage());
                                return false;
                            }
                        }
                }
                return true;
            }catch(HeadlessException ex)
            {
                return false;
            }
        }
    }
    
    private boolean UpdateProductTable() {
        Connection con = null;
        Savepoint savepoint1 = null;
        //PreparedStatement ps[] = new PreparedStatement[rows];
        PreparedStatement ps1 = null , ps2 = null;
        try
        {
            con = My_CNX.getConnection();
            con.setAutoCommit(false);
            //set a Savepoint
            savepoint1 = con.setSavepoint("Savepoint1");

            if(ImgPath != null)
            {
                try
                {
                    ps1 = con.prepareStatement("UPDATE product_table SET Name = ? , SubType = ? ,"  
                    +   " CategoryID = ? , Description = ? , UnitCategoryID = ? , Picture = ? "
                    + " WHERE id = ?" );
                    ps1.setString(7, jTextField_id.getText());
                    ps1.setString(1, jTextField_name.getText());
                    ps1.setString(2, jTextField_subType.getText());
                    ps1.setString(3, Myfunc.getProductCategoryID((String)jComboBox_category.getSelectedItem()));
                    ps1.setString(4, jTextArea_description.getText());
                    ps1.setString(5, Myfunc.getUnitCategoryID((String)jComboBox_measuringUnit.getSelectedItem()));

                    InputStream img = new FileInputStream(new File(ImgPath));
                    ps1.setBlob(6, img);
                    ps1.executeUpdate();

                    ps1.close();
                }catch(SQLException ex)
                {
                    Logger.getLogger(Edit_Product_Form.class.getName()).log(Level.SEVERE, null, ex);
                    throw new Exception("Update product_table FAILED!");
                }
                finally
                {
                    if(ps1 != null) ps1.close();
                }
            }
            else
            {
                try
                {
                    ps2 = con.prepareStatement("UPDATE product_table SET Name = ? , SubType = ? ,"  
                    +   " CategoryID = ? , Description = ? , UnitCategoryID = ? "
                    + " WHERE id = ?" );
                    ps2.setString(6, jTextField_id.getText());
                    ps2.setString(1, jTextField_name.getText());
                    ps2.setString(2, jTextField_subType.getText());
                    ps2.setString(3, Myfunc.getProductCategoryID((String)jComboBox_category.getSelectedItem()));
                    ps2.setString(4, jTextArea_description.getText());
                    ps2.setString(5, Myfunc.getUnitCategoryID((String)jComboBox_measuringUnit.getSelectedItem()));
                    ps2.executeUpdate();

                    ps2.close();
                }catch(SQLException ex)
                {
                    Logger.getLogger(Edit_Product_Form.class.getName()).log(Level.SEVERE, null, ex);
                    throw new Exception("Update product_table FAILED!");
                }
                finally
                {
                    if(ps2 != null) ps2.close();
                }
            }
            con.commit();
            con.close();
            return true;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,"PRODUCT NOT UPDATED : " + ex.getMessage());
           try {
               if(con != null) {
                   con.rollback(savepoint1);
               }
           } catch (SQLException ex1) {
               Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex1);
           }
       }finally
       {
           try { if(ps1 != null)  ps1.close(); } catch(SQLException e){}
           try { if(ps2 != null)  ps2.close(); } catch(SQLException e){}
           try { if(con != null)  con.close(); } catch(SQLException e){}
       }
       return false;
    }
    
    private void jButton_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_updateActionPerformed
        // TODO add your handling code here:
        if(checkInputs())
        {
            //first update the product table
            if(!UpdateProductTable())   return;
            
            //Now update the product_detail table
            DefaultTableModel model = (DefaultTableModel)jTable_product_detail.getModel();
            int rows = model.getRowCount();
            int cols = model.getColumnCount();
            for(int i = 0 ; i < rows ; i++)
            {
                String productDetailID = jTable_product_detail.getValueAt(i,0).toString();
                if(addedProductDetailIDList.contains(productDetailID))          //INSERT COMMAND
                {
                    System.out.println(productDetailID + " is to be inserted");
                    Connection con = null;
                    Savepoint savepoint1 = null;
                    //PreparedStatement ps[] = new PreparedStatement[rows];
                    PreparedStatement ps = null;
                    try
                    {
                        con = My_CNX.getConnection();
                        con.setAutoCommit(false);
                        //set a Savepoint
                        savepoint1 = con.setSavepoint("Savepoint1");
                        
                        ps = con.prepareStatement("INSERT INTO product_detail(id,ProductID,UnitSize,UnitPrice,Quantity,CostPrice)"
                        + "values(?,?,?,?,?,?) ");
                        System.out.println("row : " + i + " after insert");
                        ps.setString(1, productDetailID);
                        System.out.println("row : " + i + " after id");
                        ps.setString(2, jTextField_id.getText());
                        System.out.println("row : " + i + " after proid");
                        ps.setFloat(3, Float.parseFloat(model.getValueAt(i, 1).toString()) );
                        ps.setFloat(4, Float.parseFloat(model.getValueAt(i, 2).toString()) );
                        ps.setFloat(5, Float.parseFloat(model.getValueAt(i, 3).toString()) );
                        ps.setFloat(6, Float.parseFloat(model.getValueAt(i, 4).toString()) );
                        
                        System.out.println("row : " + i + " before exe update");
                        ps.executeUpdate();
                        //System.out.println("row : " + i + " after exe update");
                        ps.close();
                        con.commit();
                        con.close();
                    }catch (NumberFormatException | SQLException ex) {
                        JOptionPane.showMessageDialog(null,"PRODUCT NOT UPDATED : " + ex.getMessage());
                       try {
                           if(con != null) {
                               con.rollback(savepoint1);
                           }
                       } catch (SQLException ex1) {
                           Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex1);
                       }
                   }finally
                   {
                       try { if(ps != null)  ps.close(); } catch(SQLException e){}
                       try { if(con != null)  con.close(); } catch(SQLException e){}
                   }
                }
                /*else if(removedProductDetailIDList.contains(productDetailID))   //DELETE COMMAND
                {
                    System.out.println(productDetailID + " is to be deleted");
                    Connection con = null , con1 = null;
                    Savepoint savepoint1 = null;
                    
                    try
                    {
                        con = My_CNX.getConnection();
                        con.setAutoCommit(false);
                        //set a Savepoint
                        savepoint1 = con.setSavepoint("Savepoint1");
                        
                        con1 = Myfunc.deleteProductDetail_by_ProductDetailID(productDetailID,false);
                        
                        con1.commit();
                        con1.close();
                        con.commit();
                        con.close();
                    }catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null,"PRODUCT NOT UPDATED : " + ex.getMessage());
                       try {
                           if(con != null) {
                               con.rollback(savepoint1);
                           }
                       } catch (SQLException ex1) {
                           Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex1);
                       }
                   }finally
                   {
                       try { if(con1 != null)  con1.close(); } catch(SQLException e){}
                       try { if(con != null)  con.close(); } catch(SQLException e){}
                   }
                }*/
                else                                                            //UPDATE COMMAND
                {
                    System.out.println(productDetailID + " is to be updated");
                    //update only the product_detail table
                    Connection con = null;
                    PreparedStatement ps = null;
                    Savepoint savepoint1 = null;
                    
                    try {
                        con = My_CNX.getConnection();
                        con.setAutoCommit(false);
                        //set a Savepoint
                        savepoint1 = con.setSavepoint("Savepoint1");
                        
                        ps = con.prepareStatement("UPDATE product_detail SET UnitSize = ? , UnitPrice = ? , Quantity = ? "
                        + ", CostPrice = ? WHERE id = ?" );
                        
                        ps.setFloat(1, Float.parseFloat(model.getValueAt(i, 1).toString()));
                        ps.setFloat(2, Float.parseFloat(model.getValueAt(i, 2).toString()));
                        ps.setFloat(3, Float.parseFloat(model.getValueAt(i, 3).toString()));
                        ps.setFloat(4, Float.parseFloat(model.getValueAt(i, 4).toString()));
                        ps.setString(5, productDetailID);
                        ps.executeUpdate();

                        ps.close();
                        con.commit();
                        con.close();        //autoCommit "false" hoga phir bhi vo commit karta hai con.close() par..What to do?
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null,"PRODUCT NOT UPDATED : " + ex.getMessage());
                       try {
                           if(con != null) {
                               con.rollback(savepoint1);
                           }
                       } catch (SQLException ex1) {
                           Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex1);
                       }
                   }finally
                   {
                       try { if(ps != null)  ps.close(); } catch(SQLException e){}
                       try { if(con != null)  con.close(); } catch(SQLException e){}
                   }
                }
            }
            
            //delete the removed product detail
            removedProductDetailIDList.forEach((productDetailID) -> {
                Connection con = null , con1 = null;
                Savepoint savepoint1 = null;
                try
                {
                    con = My_CNX.getConnection();
                    con.setAutoCommit(false);
                    //set a Savepoint
                    savepoint1 = con.setSavepoint("Savepoint1");
                    
                    con1 = Myfunc.deleteProductDetail_by_ProductDetailID(productDetailID,false);
                    
                    con1.commit();
                    con1.close();
                    con.commit();
                    con.close();
                }catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null,"PRODUCT NOT UPDATED : " + ex.getMessage());
                    try {
                        if(con != null) {
                            con.rollback(savepoint1);
                        }
                    } catch (SQLException ex1) {
                        Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }finally
                {
                    try { if(con1 != null)  con1.close(); } catch(SQLException e){}
                    try { if(con != null)  con.close(); } catch(SQLException e){}
                }
            }); /*
            PreparedStatement ps1 = null;
            PreparedStatement ps2 = null;
            Connection con = null , con1 = null;
            Savepoint savepoint1 = null;
            //PreparedStatement ps[] = new PreparedStatement[rows];
            PreparedStatement ps = null;
            try {
            con = My_CNX.getConnection();
            con.setAutoCommit(false);
            //set a Savepoint
            savepoint1 = con.setSavepoint("Savepoint1");
            //System.out.println("database connected");
            if(ImgPath != null)
            {
            try
            {
            ps1 = con.prepareStatement("UPDATE product_table SET Name = ? , SubType = ? ,"
            +   " CategoryID = ? , Description = ? , UnitCategoryID = ? , Picture = ? "
            + " WHERE id = ?" );
            ps1.setString(7, jTextField_id.getText());
            ps1.setString(1, jTextField_name.getText());
            ps1.setString(2, jTextField_subType.getText());
            ps1.setString(3, Myfunc.getProductCategoryID((String)jComboBox_category.getSelectedItem()));
            ps1.setString(4, jTextArea_description.getText());
            ps1.setString(5, Myfunc.getUnitCategoryID((String)jComboBox_measuringUnit.getSelectedItem()));
            InputStream img = new FileInputStream(new File(ImgPath));
            ps1.setBlob(6, img);
            ps1.executeUpdate();
            ps1.close();
            }catch(SQLException ex)
            {
            Logger.getLogger(Edit_Product_Form.class.getName()).log(Level.SEVERE, null, ex);
            throw new Exception("Update product_table FAILED!");
            }
            finally
            {
            if(ps1 != null) ps1.close();
            }
            }
            else
            {
            try
            {
            ps2 = con.prepareStatement("UPDATE product_table SET Name = ? , SubType = ? ,"
            +   " CategoryID = ? , Description = ? , UnitCategoryID = ? "
            + " WHERE id = ?" );
            ps2.setString(6, jTextField_id.getText());
            ps2.setString(1, jTextField_name.getText());
            ps2.setString(2, jTextField_subType.getText());
            ps2.setString(3, Myfunc.getProductCategoryID((String)jComboBox_category.getSelectedItem()));
            ps2.setString(4, jTextArea_description.getText());
            ps2.setString(5, Myfunc.getUnitCategoryID((String)jComboBox_measuringUnit.getSelectedItem()));
            ps2.executeUpdate();
            ps2.close();
            }catch(SQLException ex)
            {
            Logger.getLogger(Edit_Product_Form.class.getName()).log(Level.SEVERE, null, ex);
            throw new Exception("Update product_table FAILED!");
            }
            finally
            {
            if(ps2 != null) ps2.close();
            }
            }
             */ /*
            The autoCommit = false && savepoint makes this whole update process a single transaction.
            You cannot delete and insert(or update) simultaneously on the same table in a single transaction.
            because the delete query will hold an exclusive lock over the table and will release the lock only after commit.
            Only after delete releases the lock(i.e commits), insert will acquire an exclusive lock over the table.
            But here we don't want to commit before insert(and after delete) of the product_detail table.
            we want to commit only after the whole process is successful.
             */ /*
            try
            {
            System.out.println("go in");
            con1 = Myfunc.deleteProductDetail_by_ProductID(jTextField_id.getText(),false);
            System.out.println(con1);
            }catch(Exception ex)
            {
            throw ex;
            }
            for(int i = 0 ; i < rows ; i++)
            {
            try
            {
            System.out.println("row : " + i + " starts");
            ps = con.prepareStatement("INSERT INTO product_detail(id,ProductID,UnitSize,UnitPrice,Quantity,CostPrice)"
            + "values(?,?,?,?,?,?) ");
            System.out.println("row : " + i + " after insert");
            ps.setString(1, IDGenerator.getIDforProductDetail());
            System.out.println("row : " + i + " after id");
            ps.setString(2, jTextField_id.getText());
            System.out.println("row : " + i + " after proid");
            ps.setFloat(3, Float.parseFloat(model.getValueAt(i, 0).toString()) );
            ps.setFloat(4, Float.parseFloat(model.getValueAt(i, 1).toString()) );
            ps.setFloat(5, Float.parseFloat(model.getValueAt(i, 2).toString()) );
            ps.setFloat(6, Float.parseFloat(model.getValueAt(i, 3).toString()) );
            System.out.println("row : " + i + " before exe update");
            ps.executeUpdate();
            //System.out.println("row : " + i + " after exe update");
            ps.close();
            //System.out.println("row : " + i + " ends");
            }catch(NumberFormatException | SQLException ex)
            {
            throw ex;
            }
            finally
            {
            if(ps != null) ps.close();
            }
            }
            System.out.println("here1");
            con1.commit();
            System.out.println("here2");
            con1.close();
            System.out.println("here3");
            con.commit();
            System.out.println("here4");
            con.close();
            //JOptionPane.showMessageDialog(null, "Data Inserted");
            } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,"PRODUCT NOT UPDATED : " + ex.getMessage());
            try {
            if(con != null) {
            con.rollback(savepoint1);
            }
            } catch (SQLException ex1) {
            Logger.getLogger(MANAGE_ORDERS_FORM.class.getName()).log(Level.SEVERE, null, ex1);
            }
            }finally
            {
            // for(int i = 0 ; i < rows;i++)   try { if(ps[i] != null)  ps[i].close(); } catch(SQLException e){}
            try { if(ps1 != null)  ps1.close(); } catch(SQLException e){}
            try { if(ps1 != null)  ps1.close(); } catch(SQLException e){}
            try { if(ps2 != null)  ps2.close(); } catch(SQLException e){}
            try { if(con1 != null)  con1.close(); } catch(SQLException e){}
            try { if(con != null)  con.close(); } catch(SQLException e){}
            }
             */
             JOptionPane.showMessageDialog(null,"Product Updated Successfully :-)");
            this.dispose();
        }else{
            JOptionPane.showMessageDialog(null, "One Or More Field Are Empty");
        }
        
    }//GEN-LAST:event_jButton_updateActionPerformed

    private void jButton_addARowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_addARowActionPerformed
        String productDetailID = IDGenerator.getIDforProductDetail();
        addedProductDetailIDList.add(productDetailID);
        Object[] row = {productDetailID,"" , "" , "" ,""};
        DefaultTableModel model = (DefaultTableModel) jTable_product_detail.getModel();
        model.addRow(row);
        System.out.println("added : " + addedProductDetailIDList);
        System.out.println("removed : " + removedProductDetailIDList);
    }//GEN-LAST:event_jButton_addARowActionPerformed

    private void jButton_removeRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_removeRowActionPerformed
        // TODO add your handling code here:
        int index = jTable_product_detail.getSelectedRow();
        String productDetailID = jTable_product_detail.getValueAt(index,0).toString();
        
        DefaultTableModel model = (DefaultTableModel)jTable_product_detail.getModel();
        if(addedProductDetailIDList.contains(productDetailID))
        {
            System.out.println("Newly added is removed");
            addedProductDetailIDList.remove(productDetailID);
        }
        else
        {
            removedProductDetailIDList.add(productDetailID);
        }
        model.removeRow(index);
        System.out.println("added : " + addedProductDetailIDList);
        System.out.println("removed : " + removedProductDetailIDList);
    }//GEN-LAST:event_jButton_removeRowActionPerformed

    private boolean flag = true;
    
    private void checkPriceValues(int row, int col) {
        if(flag == false)   return;
        DefaultTableModel orderModel = (DefaultTableModel)jTable_product_detail.getModel();
        String unitPrice = orderModel.getValueAt(row, 2).toString();    
        String costPrice = orderModel.getValueAt(row, 4).toString();
        if(col == 4)
        {
            if(unitPrice.equals(""))
            {
                JOptionPane.showMessageDialog(null, "Please Enter The Unit Price!");
                return;
            }
            if(Float.parseFloat(unitPrice) < Float.parseFloat(costPrice))
            {
                JOptionPane.showMessageDialog(null, "COST Price CANNOT be GREATER THAN the Unit Price!");
                flag = false;
                /*
                    TODO Don't allow(Round off) more than two decimal places
                    for all floating numbers in the project
                */
                orderModel.setValueAt("0", row, 4);     //set Cost Price 0
                flag = true;
            }
        }
        else if(col == 2)
        {
            if(costPrice.equals(""))
            {
                flag = false;
                orderModel.setValueAt("0", row, 4);     //set Cost Price 0
                flag = true;
                return;
            }
            if(Float.parseFloat(unitPrice) < Float.parseFloat(costPrice))
            {
                JOptionPane.showMessageDialog(null, "COST Price CANNOT be GREATER THAN the Unit Price!");
                flag = false;
                orderModel.setValueAt("0", row, 4);     //set Cost Price 0
                flag = true;
            }
        }
    }
    
    private void addTableListener() {
        DefaultTableModel orderModel = (DefaultTableModel)jTable_product_detail.getModel();
        //int row = jTable_orders.getSelectedRow();
        //int cols = jTable_product_detail.getColumnCount();
        orderModel.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent tme) {
                if (tme.getType() == TableModelEvent.UPDATE) {
                    /*This if statement has resolved the problem for last column only
                    But the "Flag" system has solved the problem in general for all the
                    required columns...COOL!
                    */
                    //if(tme.getColumn() == (cols-1))     return;     //don't go on infinite loop..don't listen to Amount's(last column) Update
                    int row = tme.getFirstRow();
                    int col = tme.getColumn();
            /*        System.out.println("");
                    System.out.println("Cell " + tme.getFirstRow() + ", "
                            + tme.getColumn() + " changed. The new value: "
                            + orderModel.getValueAt(tme.getFirstRow(),
                                    tme.getColumn()));*/
                    if(col == 2 || col == 4)
                        checkPriceValues(row,col);
                }
            }
        });
    }
    
    /**
     * @param args the command line arguments
     */
  /*  public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
    /*    try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Edit_Product_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Edit_Product_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Edit_Product_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Edit_Product_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    /*    java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Edit_Product_Form().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_addARow;
    private javax.swing.JButton jButton_cancel;
    private javax.swing.JButton jButton_removeRow;
    private javax.swing.JButton jButton_selectImage;
    private javax.swing.JButton jButton_update;
    private javax.swing.JComboBox<String> jComboBox_category;
    private javax.swing.JComboBox<String> jComboBox_measuringUnit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_image;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_product_detail;
    private javax.swing.JTextArea jTextArea_description;
    private javax.swing.JTextField jTextField_id;
    private javax.swing.JTextField jTextField_name;
    private javax.swing.JTextField jTextField_subType;
    // End of variables declaration//GEN-END:variables

    
}
